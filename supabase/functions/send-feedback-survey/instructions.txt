# Creating a New Edge Function in Supabase Dashboard

Since there are no edge functions in your project yet, we need to create one from scratch:

## Steps to Create the Edge Function:

1. Go to the Supabase dashboard: https://app.supabase.com/
2. Select your project (lnnfolrzonnnuazlhvwo)
3. In the left sidebar, click on "Edge Functions"
4. Click the "Create a new function" button
5. Name your function: `send-feedback-survey`
6. Click "Create function"
7. Copy and paste the following code into the editor:

```ts
// @deno-types="https://esm.sh/v128/supabase@1.8.1/dist/main/index.d.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.24.0'

// CORS headers with both localhost and production URLs
const corsHeaders = {
  'Access-Control-Allow-Origin': '*', // Allow all origins for testing
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type, x-supabase-auth',
  'Access-Control-Allow-Methods': 'POST, OPTIONS, GET',
  'Access-Control-Max-Age': '86400', // 24 hours cache for preflight requests
}

// Request body interface
interface RequestBody {
  phone: string;
  businessName?: string;
  location?: string;
  visitDate?: string;
  surveyLink?: string;
  userId?: string;
}

// Function to format phone number
function formatPhoneNumber(phone: string): string {
  // Strip any non-numeric characters except for + at the beginning
  if (phone.startsWith('+')) {
    // Keep the + and strip other non-numeric characters
    return '+' + phone.substring(1).replace(/\D/g, '');
  }
  
  // Strip any non-numeric characters
  const cleaned = phone.replace(/\D/g, '');
  
  // If the number doesn't have a country code, assume it's from the country
  // specified in the test phone (which appears to be India)
  if (!cleaned.startsWith('91') && !cleaned.startsWith('1')) {
    return '+91' + cleaned;
  }
  
  // Otherwise, add a + at the beginning
  return '+' + cleaned;
}

// Main server function
Deno.serve(async (req) => {
  console.log(`Received ${req.method} request to ${req.url}`);
  
  // Handle CORS preflight requests - this is critical for browser compatibility
  if (req.method === 'OPTIONS') {
    console.log('Handling OPTIONS request (CORS preflight)');
    return new Response('ok', { 
      headers: corsHeaders,
      status: 200
    });
  }
  
  if (req.method !== 'POST') {
    return new Response(JSON.stringify({ 
      status: 'error', 
      message: 'Method not allowed' 
    }), { 
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 405
    });
  }
  
  try {
    // Get WhatsApp API credentials from environment
    const WHATSAPP_TOKEN = Deno.env.get('WHATSAPP_TOKEN');
    const WHATSAPP_API_VERSION = Deno.env.get('WHATSAPP_API_VERSION') || 'v18.0';
    // Your actual WhatsApp test phone number ID from .env file
    const WHATSAPP_PHONE_NUMBER_ID = Deno.env.get('WHATSAPP_PHONE_NUMBER_ID') || '637393796117589';
    
    if (!WHATSAPP_TOKEN) {
      throw new Error('WhatsApp API token not configured');
    }
    
    // Parse request body
    const requestData: RequestBody = await req.json();
    
    // Extract and validate required fields
    const { phone, businessName, location, visitDate, surveyLink, userId } = requestData;
    
    if (!phone) {
      throw new Error('Phone number is required');
    }
    
    // Format phone number to ensure it has country code
    const formattedPhone = formatPhoneNumber(phone);
    
    console.log('Sending message to:', formattedPhone);
    
    // Default values based on the template shown in the image
    const businessNameValue = businessName || "Jasper's Market";
    
    // Prepare the WhatsApp API request for feedback template
    const whatsappRequest = {
      messaging_product: 'whatsapp',
      recipient_type: 'individual',
      to: formattedPhone,
      type: 'template',
      template: {
        name: 'feedback_survey',
        language: {
          code: 'en_US'
        },
        components: [
          {
            type: 'header',
            parameters: [
              {
                type: 'text',
                text: 'How did we do?'
              }
            ]
          },
          {
            type: 'body',
            parameters: [
              {
                type: 'text',
                text: businessNameValue
              },
              {
                type: 'text',
                text: 'customer feedback'
              },
              {
                type: 'text',
                text: 'continually improve our products'
              }
            ]
          },
          {
            type: 'button',
            sub_type: 'url',
            index: 0,
            parameters: [
              {
                type: 'text',
                text: surveyLink || 'https://example.com/feedback'
              }
            ]
          }
        ]
      }
    };
    
    console.log('Sending WhatsApp request:', JSON.stringify(whatsappRequest, null, 2));
    
    // Send the message via WhatsApp API
    const response = await fetch(`https://graph.facebook.com/${WHATSAPP_API_VERSION}/${WHATSAPP_PHONE_NUMBER_ID}/messages`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${WHATSAPP_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(whatsappRequest)
    });
    
    // Get the response as text first to handle empty responses
    const responseText = await response.text();
    let responseData;
    
    try {
      responseData = responseText ? JSON.parse(responseText) : {};
    } catch (e) {
      console.error('Error parsing response:', e);
      responseData = { error: 'Invalid JSON response' };
    }
    
    if (!response.ok) {
      console.error('WhatsApp API error:', responseData);
      throw new Error(`WhatsApp API error: ${response.status} - ${JSON.stringify(responseData)}`);
    }
    
    console.log('WhatsApp API response:', JSON.stringify(responseData, null, 2));
    
    return new Response(
      JSON.stringify({ 
        status: 'success', 
        message: 'Feedback survey sent',
        data: responseData
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      }
    );
    
  } catch (error) {
    console.error('Error processing request:', error);
    
    return new Response(
      JSON.stringify({ 
        status: 'error', 
        message: error instanceof Error ? error.message : 'Unknown error' 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500 
      }
    );
  }
});
```

8. After pasting the code, click "Deploy function"

## Setting Environment Variables

After creating the function, you need to set environment variables for WhatsApp API:

1. Still on the Edge Functions page, find your newly created function
2. Click on the three dots menu button ("...") to the right of the function
3. Select "Edit environment variables"
4. Add the following environment variables:
   - `WHATSAPP_TOKEN`: `EAAJf22DDn5UBO8ccNCY6XOAeB1N0qZC8Od8tUJIijyxDuHUPUJDj1Ac760CWBV8aFDZCyYamjia9b8dUCs77jz5mOQoDAUampmActSzPZCxTk9bCsivLphLZCilZCoIuuHd33ZA6nMAacIgD7SEFJ8GkzWpoSoalmN2F7ymaIKZCFZBFJYKEZCR0a9rPgEZCrTQstZBvD6YwZCihSkj58RmvKPwotuMIZABuLz3lUj5gaJKUg2uthM48IziwZD`
   - `WHATSAPP_PHONE_NUMBER_ID`: `637393796117589`
   - `WHATSAPP_API_VERSION`: `v18.0`

5. Click "Save" to apply these environment variables

## Getting Your WhatsApp API Token

To get your WhatsApp API token:

1. Go to the [Facebook Developer Portal](https://developers.facebook.com/)
2. Log in with your Facebook account
3. Navigate to "My Apps" in the top navigation
4. Select your app (or create one if you don't have it yet)
5. In the left sidebar, go to WhatsApp > API Setup
6. Look for "Temporary access token" or "System User Access Token"
7. Copy this token value and paste it in your Supabase environment variable

Note: The test WhatsApp number (+1 555 639 9268) and its ID (104077982572158) are already configured in the code for convenience. This is a shared test environment number that should work for development and testing, but for production, you'll need your own business phone number.

## Testing the Function

You can test the function directly from the Supabase dashboard:

1. Go to the Edge Functions page
2. Click on your function name to open its details
3. Click on the "Terminal" tab
4. Test the function with this command:

```
curl -X POST https://lnnfolrzonnnuazlhvwo.supabase.co/functions/v1/send-feedback-survey \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxubmZvbHJ6b25ubnVhemxodndvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzYyMDExOTksImV4cCI6MjA1MTc3NzE5OX0.FvWYjm3g_3LRMePQum8CqYapsqju4fADK3AXpa-uCsc" \
  -d '{"phone":"+916239521161", "businessName":"Jasper'"'"'s Market"}'
```

This command uses:
- Your project's anon key from the .env file
- The test phone number from your .env file (+916239521161)

## Connect from Your Frontend

Now you should be able to call this function from your frontend using:

```javascript
const { error, data } = await supabase.functions.invoke('send-feedback-survey', {
  body: { 
    phone: phoneNumber,
    businessName: "Jasper's Market",
    location: "your local store",
    visitDate: "today",
    surveyLink: "https://example.com/feedback"
  },
});
```